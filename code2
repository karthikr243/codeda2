
//reverse integer
int reverse(int x){
    long long int rev=0;
    int r;
    while(x!=0){
        r=x%10;
        rev=rev*10+r;
        x=x/10;
    }
    if(rev>=pow(-2,31)&&rev<=pow(2,31)-1)
        return rev;
    else
        return 0;
}

//search a 2d matrix
bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){
    int m=matrixSize;
    int n=*matrixColSize;

    int left=0,right=m*n-1;
    int pivotIdx,pivotElement;
    while(left<=right){
        pivotIdx=left+(right-left)/2;
        pivotElement=matrix[pivotIdx/n][pivotIdx%n];
        if(target==pivotElement)
            return true;
        else{
            if(target<pivotElement)
                right=pivotIdx-1;
            else
                left=pivotIdx+1;
        }
    }
    return false;
}

//singlenumber2
int singleNumber(int* nums, int numsSize){
    int x,y,ct;
    for(x=0;x<numsSize;x++){
        ct=0;
        for(y=0;y<numsSize;y++){
            if(nums[x]==nums[y]){
                ct+=1;
            }
        }
        if (ct==1){
            return nums[x];
        }
    }
    return 0;
}

//peak element
int findPeakElement(int* nums, int numsSize){
    int i=1;
        if(numsSize==1)
            return i-1;
    for(i=1;i<=numsSize-1;i++){
        if(nums[i-1]<nums[i]&&i==numsSize-1)
            return i;
        else if(nums[i-1]<nums[i]&&nums[i+1]<nums[i])
            return i;
    }
    return 0;   

}

//largest number
int compare(const void* a, const void* b) {
	const char** ia = (const char*)a;
	const char** ib = (const char*)b;
	char* string1[20] = { '\0' };
	char* string2[20] = { '\0' };
	strcat(string1, *ia);
	strcat(string1, *ib);
	strcat(string2, *ib);
	strcat(string2, *ia);
	return -1*strcmp(string1, string2);
}
char * largestNumber(int* nums, int numsSize){
	char* zero = "0";
	char** temp = malloc(sizeof(char*) * numsSize);
	for (int i = 0; i < numsSize; i++) {
		temp[i] = malloc(sizeof(char) * 10);
		sprintf(temp[i], "%d", nums[i]);
	}
	qsort(temp, numsSize, sizeof(char*) , compare);

	if (!strcmp(temp[0], "0")) { return "0"; }

	char* ans = malloc(sizeof(char) * 500);
	ans[0] = '\0';
	for (int i = 0; i < numsSize; i++) {
		strcat(ans, temp[i]);
	}
	printf("%s", ans);
	return ans;
}
